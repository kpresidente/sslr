const copyRecord=async(e,t)=>{const a=e=>{for(field in"id"in e&&delete e.id,e)"connection"==FLD[field].attributes.type&&(e[field]=[].concat(val).map((e=>e.id)));return e};try{Knack.showSpinner();const n=e.scene.views.find((e=>"Record Details"===e.name)).map((n=>{const r=n.source.object,c=a(dv(e).getData("raw")[0]);return db(r).key(t.id).update(c)})),r=e.scene.views.filter((e=>"Record Items"===e.name)).flatMap((e=>{const n=e.source.object,r=e.source.connection_key;return dv(e).getData("raw").map((e=>((e=a(e))[r]=[t.id],db(n).create(e))))})),c=await Promise.allSettled([...n,...r]).filter((e=>"rejected"==e.status)).map((e=>e.reason.toString())).join("<br>");if(c.length)throw Error(c);document.getElementsByClassName("close-modal")[0]?.click(),Knack.router.scene_view.model.views.models.map((e=>Knack.views[e.id].model)).filter((e=>"data"in e)).forEach((e=>e.fetch())),Knack.hideSpinner()}catch(e){await MsgBox("There was an error copying the record!",`${e.name}: ${e.message}`)}};