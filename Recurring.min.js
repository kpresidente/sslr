async function createInitialBills(e){const l=[],t=e[FLD.RecurringBills.ScheduledQuantity]-e[FLD.RecurringBills.ScheduledCount],r=e[FLD.RecurringBills.Periods],a=e[FLD.RecurringBills.Period],n=e[FLD.RecurringBills.DueDays],s=e[FLD.RecurringBills.PayDays],u=cbool(e[FLD.RecurringBills.Autopay]);let D={[FLD.RecurringBills.Account]:e[FLD.RecurringBills.Account],[FLD.RecurringBills.Amount]:e[FLD.RecurringBills.Amount],[FLD.RecurringBills.Autopay]:e[FLD.RecurringBills.Autopay]};u&&(D[FLD.RecurringBills.AutopayReference]=e[FLD.RecurringBills.AutopayReference],D[FLD.RecurringBills.AutopayAmount]=e[FLD.RecurringBills.AutopayAmount]);let c=new Date(e[FLD.RecurringBills.BillDate]);for(i=1;i<=t;i++){switch(a){case"Daily":c.setDate(c.getDate()+r);case"Weekly":c.setDate(c.getDate()+7*r);case"Monthly":c.setMonth(c.getMonth()+r);case"Annually":c.setFullYear(c.getFullYear()+r)}D[FLD.RecurringBills.BillDate]=c.toString(),D[FLD.RecurringBills.DueDate]=new Date(c.getDate()+n).toString(),u&&(D[FLD.RecurringBills.AutopayDate]=new Date(c.getDate()+s).toString()),l.push(db(TBL.Bills).create(D))}return await Promise.all(l)}async function updateScheduledRecords(e){function l(l){let t=new Date(l);const i=e[FLD.RecurringBills.Periods];switch(e[FLD.RecurringBills.Period]){case"Daily":t.setDate(t.getDate()+i);break;case"Weekly":t.setDate(t.getDate()+7*i);break;case"Monthly":t.setMonth(t.getMonth()+i);break;case"Annually":t.setFullYear(t.getFullYear()+i);break}return t.toString()}async function t(l,t,i){let r=await uniqueNum.getRandom(TBL.Bills),a=await db(TBL.Bills).create({[FLD.Bills.Account]:sub(e,FLD.RecurringBills.Account,"id"),[FLD.Bills.Amount]:e[FLD.RecurringBills.BillAmount],[FLD.Bills.Autopay]:e[FLD.RecurringBills.Autopay],[FLD.Bills.BillDate]:l,[FLD.Bills.DueDate]:t,[FLD.Bills.Number]:r,[FLD.Bills.RecurringBill]:e.id}),n=[a];if("Yes"==e[FLD.RecurringBills.Autopay]){let l=await uniqueNum.getRandom(TBL.Payments),t=await db(TBL.Payments).create({[FLD.Payments.Account]:sub(e,FLD.RecurringBills.Account,"id"),[FLD.Payments.Amount]:e[FLD.RecurringBills.PaymentAmount],[FLD.Payments.Bill]:a.data[0].id,[FLD.Payments.Date]:i,[FLD.Payments.Number]:l,[FLD.Payments.RecurringBill]:e.id,[FLD.Payments.Reference]:e[FLD.RecurringBills.PaymentReference],[FLD.Payments.Type]:e[FLD.RecurringBills.PaymentType]});n.concat(t)}return n}try{let i=[],r=await db(TBL.Bills).filter(FLD.Bills.Date,"is after today").filter(FLD.Bills.RecurringBill,"is",e.id).filter(FLD.Bills.Exists,"is",1).sort(FLD.Bills.Date,"asc").get().data,a=recurringBills[FLD.RecurringBills.ScheduledCount]||0,n=recurringBills[FLD.RecurringBills.ScheduledQty]||0;if(a<n){let r=e[FLD.RecurringBills.NextBillDate],s=e[FLD.RecurringBills.NextDueDate],u=e[FLD.RecurringBills.NextPaymentDate],D=n-a;for(let e=0;e<D;e++)i.push(t(r,s,u)),r=l(r),s=l(s),u=l(u)}else a>n&&r.slice(quantity).forEach((e=>{i.push(db(TBL.Bills).key(e.id).update({[FLD.Bills.Deleted]:!0}))}));const s=r[0][FLD.Bills.Date];"Yes"==e[FLD.RecurringBills.Ongoing]?i.push(db(TBL.RecurringBills).key(e.id).update({[FLD.RecurringBills.NextCreateDate]:s,[FLD.RecurringBills.NextBillDate]:billDate,[FLD.RecurringBills.NextDueDate]:dueDate,[FLD.RecurringBills.NextPaymentDate]:"Yes"==e[FLD.RecurringBills.Autopay]?payDate:""})):i.push(db(TBL.RecurringBills).key(e.id).update({[FLD.RecurringBills.NextCreateDate]:"",[FLD.RecurringBills.NextBillDate]:"",[FLD.RecurringBills.NextDueDate]:"",[FLD.RecurringBills.NextPaymentDate]:""}));let u=await Promise.all(i);return Knack.hideSpinner(),u}catch(e){return await MsgBox("There was an error updating the scheduled Bills and/or Payments!",e),e}}async function updateCreateDate(e){try{Knack.showSpinner();let l=(await db(TBL.Bills).filter([FLD.Bills.Date],"is after today").filter([FLD.Bills.Exists],"is",1).sort(FLD.Bills.Date,"asc").get().data)[0][FLD.Bills.Date],t=await db(TBL.RecurringBills).key(e).update({[FLD.RecurringBills.NextCreateDate]:l});return Knack.hideSpinner(),t}catch(e){return await MsgBox("There was an error updating the Recurring Bills next Creation Date!",e),e}}