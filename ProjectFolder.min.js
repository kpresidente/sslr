var pf=function(e){const t=e.source.object,a=TBL[t].attributes.inflections.singular,r=new Dropbox.Dropbox({accessToken:"Jj0IQHXz0okAAAAAAAAAAek7sDqDrcs_8BC4Cn3-cEZWIXyorxqYTCz8SWx6W6kw"}),n=new Dropbox.Dropbox({accessToken:"VRSTu6aWlyQAAAAAAAAAAX6SKQ19GXwbXtKifriVgrYpXMy57eVSouhsLu11HSAD"});return{appendFields:s,createFolder:c,createShared:l,deleteFolder:async function(e){try{Knack.showSpinner(),e=await s(e,[FLD[t].FolderPath]);const a=await o(r.filesDelete.bind(r,{path:e[FLD.Projects.FolderPath]}));return Knack.hideSpinner(),a}catch(e){i("deleting",e)}},updateFolder:async function(e,a){try{Knack.showSpinner(),e=await s(e,FLD[t].FolderPath);const n=a[FLD.Projects.FolderPath],i=e[FLD.Projects.FolderPath];let l;if(i!==n)try{l=await o(r.filesMove.bind(r,{from_path:n,to_path:i,autorename:!0}))}catch(t){const a=t?.error?.error?.[".tag"];if("duplicated_or_nested_paths"==a);else{if("from_lookup"!=a)return Promise.reject(t);l=await c(e)}}else l="The folder path was not changed.";return Knack.hideSpinner(),l}catch(e){i("updating",e)}},updateShared:async function(e,a){try{Knack.showSpinner(),e=await s(e,[FLD[t].FolderPath,FLD[t].Shared]);const r=(a=await s(a,[FLD[t].FolderPath,FLD[t].Shared]))[FLD.Projects.FolderPath],i=e[FLD.Projects.FolderPath],c=e[FLD.Projects.Shared],h=a[FLD.Projects.Shared];let u;if(h&&!c)u=await d(e);else if(c&&!h)u=await l(e);else if(r!==i)try{u=await o(n.filesMove.bind(n,{from_path:r,to_path:i,autorename:!0}))}catch(t){const a=t?.error?.error?.[".tag"];if("duplicated_or_nested_paths"==a);else{if("from_lookup"!=a)return Promise.reject(t);u=await l(e)}}else u="No changes were made to the shared folder";return Knack.hideSpinner(),u}catch(e){i("sharing",e)}}};async function i(e,t){return Knack.hideSpinner(),await MsgBox(`There was an error ${e} the ${a} folder!`,t.message),t}async function o(e){let t,a=1;for(;a<5;)try{return t=await e(),t}catch(e){if(429!==e.status)return Promise.reject(e);await sleep(2**a*100),a++}let n=t.result;if("async_job_id"==n[".tag"])do{await sleep(300),t=await o(r.filesCreateFolderBatchCheck.bind(r,n))}while("in_progress"==t.result[".tag"]);if("failed"==t.result[".tag"])throw new Error(t.result[".tag"])}async function s(e,a){if((a=[].concat(a)).includes(FLD[t].FolderPath)&&!(FLD[t].FolderPath in e)){const a=t==TBL.Companies?"/":e?.[FLD[t].FolderRoot];!a&&FLD.Projects.Archived in e&&(a="yes"==FLD.Projects.Archived||FLD.Projects.Archived?"/Miscellaneous/Archives/":"/");const r=e?.[FLD[t].Name],n=e?.[FLD[t].Number];a&&r&&n&&(e[FLD[t].FolderPath]=`${root}${r} - ${n}`)}if(t==TBL.Projects){const r=FLD[t].Status,n=FLD[t].Archived,i=FLD[t].Status,o=FLD[t].Shared;a.includes(o)&&!(o in e)&&r in e&&n in e&&i in e&&(e[o]="Installing"===e[r]&&!0===e[n]&&1===e[i])}return a.some((t=>!(t in e)))&&(e=await db(t).key(e.id).get().then((e=>e.data[0]))),e}async function c(e){try{Knack.showSpinner();const a=(e=await s(e,FLD[t].FolderPath))[FLD.Projects.FolderPath],n={[TBL.Companies]:["Bills","Payments","Receipts"],[TBL.Projects]:["Billing","Contracts","Estimating","Installation","Installation/Photos","Payroll","Plans","Plans/Full Set","Submittals","Submittals/Drawings"]}[t].map((e=>`${a}/${e}`)),i=[a,...n];let c=await o(r.filesCreateFolderBatch.bind(r,{paths:i,autorename:!1})),l=c.result;if("async_job_id"==l[".tag"])do{await sleep(300),c=await o(r.filesCreateFolderBatchCheck.bind(r,l))}while("in_progress"==c.result[".tag"]);if("failed"==c.result[".tag"])throw new Error(c.result[".tag"]);return Knack.hideSpinner(),c}catch(e){i("creating",e)}}async function l(e){try{if(Knack.showSpinner(),"Installing"!==(e=await s(e,[FLD[t].FolderPath,FLD[t].Shared,FLD.Projects.Status]))[FLD.Projects.Status])return"Status Not Set to Installing";const a=e[FLD.Projects.FolderPath],r=await o(n.filesCreateFolder.bind(n,{path:a,autorename:!1})).catch((e=>{if(!e?.error?.error?.path?.conflict)return e})),i=await h(`${a}/Installation`,"editor"),c=await h(`${a}/Plans`,"viewer"),l={fldCreate:r,insShare:i,plnShare:c,subShare:await h(`${a}/Submittals`,"viewer")};return Knack.hideSpinner(),l}catch(e){i("sharing",e)}}async function d(e){try{Knack.showSpinner();(e=await s(e,[FLD[t].FolderPath,FLD[t].Shared,FLD.Projects.Status]))[FLD.Projects.FolderPath];const a=await u(`${oldPath}/${Installation}`),r=await u(`${oldPath}/${Plans}`),i=await u(`${oldPath}/${Submittals}`),c=await o(n.filesDelete(n,{path:folderPath})).catch((e=>{if(!e?.error?.error?.path?.conflict)return e}));return response=[a,r,i,c],Knack.hideSpinner(),response}catch(e){i("unsharing",e)}}async function h(e,t="editor",a="installation@sslr.net"){let i;try{i=await o(r.sharingShareFolder.bind(r,{path:e,force_async:!1,access_inheritance:{".tag":"inherit"}}))}catch(e){const t=e?.error?.error?.bad_path||{};if("already_shared"!==t?.[".tag"])return Promise.reject(e);i={result:t}}const s=i.result.shared_folder_id;let c;await o(r.sharingAddFolderMember.bind(r,{shared_folder_id:s,quiet:!0,members:[{member:{email:a,".tag":"email"},access_level:{".tag":t}}]}));try{c=await o(n.sharingMountFolder.bind(n,{shared_folder_id:s}))}catch(e){if("already_mounted"!=e?.error?.error?.[".tag"])return Promise.reject(e);c=await o(n.sharingGetFolderMetadata.bind(n,{shared_folder_id:s}))}const l=c.result.path_lower;if(l==e.toLowerCase())return l;return(await o(n.filesMove.bind(n,{from_path:l,to_path:e,autorename:!0}))).result.path_lower}async function u(e,t){if(!t){t=(await o(r.filesGetMetaData.bind(r,{path:e,include_media_info:!1,include_deleted:!0,include_has_explicit_shared_members:!1}))).result.sharing_info.shared_folder_id}const a=await o(r.sharingUnshareFolder.bind({shared_folder_id:t,leave_a_copy:!1}));return{metaData:metaData,unshare:a,deletion:deletion}}};async function createAllShares(e=!1){try{const t=[],a=[],r=await db(TBL.Projects).filter(FLD.Projects.Status,"is","Installing").filter(FLD.Projects.Exists,"is",1).filter(FLD.Projects.Archived,"is",!1).get().then((e=>e.data));for(let n of r){(e||confirm(`Create shared folder for ${n[FLD.Projects.Name]} - ${n[FLD.Projects.Number]}?`))&&await pf({source:{object:TBL.Projects}}).createShared(n).then((e=>a.push(n.id))).catch((e=>t.push(n.id)))}}catch(e){}}